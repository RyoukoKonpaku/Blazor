<Project>

  <Target
    Name="_BlazorCopyFilesToOutputDirectory"
    DependsOnTargets="BlazorBuild"
    Inputs="@(BlazorItemSpec)"
    Outputs="@(BlazorItemSpec->'%(TargetOutputPath)')"
    AfterTargets="CopyFilesToOutputDirectory">

    <!-- Copy the blazor output files  -->
    <Copy
      SourceFiles="@(BlazorItemSpec)"
      DestinationFiles="@(BlazorItemSpec->'%(TargetOutputPath)')"
      SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
      OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
      Retries="$(CopyRetryCount)"
      RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
      UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
      UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
      Condition="'@(BlazorItemSpec)' != '' and '$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'">    
    </Copy>

    <ItemGroup>
      <BlazorOutputs Include="$(ProjectDir)$(OutputPath)dist/**/*" />
    </ItemGroup>
    
  </Target>
  
  <Target Name="_BlazorBuildReport"
          AfterTargets="_BlazorCopyFilesToOutputDirectory">

    <PropertyGroup>
      <BlazorBuildStatistics Condition="'$(BlazorBuildStatistics)' == ''">normal</BlazorBuildStatistics>
      <BlazorBuildStatistics Condition="'$(BlazorBuildStatistics)' == 'true'">high</BlazorBuildStatistics>
    </PropertyGroup>

    <Message Importance="high" Text="Blazor Build result -> @(BlazorOutputs->Distinct()->Count()) files written to $(ProjectDir)$(OutputPath)dist" />
    <Message Importance="$(BlazorBuildStatistics)" Text="%(BlazorOutputs.Identity)" />
    </Target>

  <PropertyGroup>
    <BlazorBuildDependsOn>
      GetBlazorBuildConfiguration;
      ResolveBinaryOutput;
      BuildBlazorIndexHtml;
    </BlazorBuildDependsOn>
  </PropertyGroup>

  <Target Name="BlazorBuild" DependsOnTargets="$(BlazorBuildDependsOn)" AfterTargets="Compile" />

  <Target Name="GetBlazorBuildConfiguration">
    <!-- 
    This task produces all the "final" paths for all the files we need to produce the final output.
    BlazorIntermediateOutputPath is something like /obj/debug/netstandard2.0/blazor.
    Inside there we want to produce a folder structure like the following
    dist/_framework/_bin <- This will contain either the BCL + app assemblies or the result of linking the app.
    dist/_framework/asmjs <- This will contain the asmjs runtime copied from the nuget package.
    dist/_framework/wasm <- This will contain the wsm runtime copied from the nuget package.
    dist/_framework/blazor.js <- This is the blazor.js file copied from the nuget package.
    dist/Index.html <- This is the optional Index.html file generated from wwwroot/Index.html in case it's present.
    
    This task also defines some intermediate paths that we will use:
    /obj/debug/netstandard2.0/blazor/blazor/linker <- This will be used to create the output from the linker.
    /obj/debug/netstandard2.0/blazor/blazor/linker.marker.txt <- This will be used to save the output files from
    the linker and use that as marker to identify whether or not we need to run the linker.
    -->

    <PropertyGroup Label="Build properties">
      <BlazorShouldRunMonoLinker>$(BlazorLinkOnBuild)</BlazorShouldRunMonoLinker>
    </PropertyGroup>

    <PropertyGroup Label="Blazor HTML inputs">
      <BlazorWebRootPath>$(ProjectDir)$(BlazorWebRootName)</BlazorWebRootPath>
      <BlazorIndexHtml>$(BlazorWebRootPath)$(BlazorIndexHtmlName)</BlazorIndexHtml>
    </PropertyGroup>

    <ItemGroup Label="BlazorItemSpecs">
      <BlazorItemSpec Include="@(MonoAsmjsFile)">
        <TargetOutputPath>$(ProjectDir)$(OutputPath)$(BaseBlazorRuntimeAsmjsOutputPath)%(FileName)%(Extension)</TargetOutputPath>
        <Type>AsmJs</Type>
        <IsStatic>true</IsStatic>
      </BlazorItemSpec>
      <BlazorItemSpec Include="@(MonoWasmFile)">
        <TargetOutputPath>$(ProjectDir)$(OutputPath)$(BaseBlazorRuntimeWasmOutputPath)%(FileName)%(Extension)</TargetOutputPath>
        <Type>WebAssembly</Type>
        <IsStatic>true</IsStatic>
      </BlazorItemSpec>
      <BlazorItemSpec Include="@(BlazorJsFile)">
        <TargetOutputPath>$(ProjectDir)$(OutputPath)$(BaseBlazorJsOutputPath)%(FileName)%(Extension)</TargetOutputPath>
        <Type>BlazorRuntime</Type>
        <IsStatic>true</IsStatic>
      </BlazorItemSpec>
    </ItemGroup>

    <PropertyGroup Label="Intermediate output paths">

      <!-- /obj/debug/netstandard2.0/blazor -->
      <BlazorIntermediateOutputPath>$(ProjectDir)$(IntermediateOutputPath)$(BaseBlazorIntermediateOutputPath)</BlazorIntermediateOutputPath>

      <!-- /obj/debug/netstandard2.0/blazor/linker/ -->
      <BlazorIntermediateLinkerOutputPath>$(BlazorIntermediateOutputPath)linker/</BlazorIntermediateLinkerOutputPath>
      
      <!-- /obj/debug/netstandard2.0/blazor/linker.marker.txt -->
      <BlazorIntermediateLinkerResultFilePath>$(BlazorIntermediateOutputPath)linker.marker.txt</BlazorIntermediateLinkerResultFilePath>

      <!-- /obj/debug/netstandard2.0/blazor/Index.html -->
      <BlazorIndexHtmlOutputPath>$(BlazorIntermediateOutputPath)$(BlazorIndexHtmlName)</BlazorIndexHtmlOutputPath>
    
      <!-- /obj/debug/netstandard2.0/blazor/Descriptor.xml -->
      <GeneratedBlazorLinkerDescriptor>$(BlazorIntermediateOutputPath)Descriptor.xml</GeneratedBlazorLinkerDescriptor>

      <!-- /obj/debug/netstandard2.0/blazor/Descriptor.xml -->
      <BlazorResolvedAssembliesOutputPath>$(BlazorIntermediateOutputPath)ResolvedAssemblies.txt</BlazorResolvedAssembliesOutputPath>

    </PropertyGroup>
    
    <ItemGroup Label="Different outputs used through the build">
      <ProducedLinkerDescriptor Include="$(GeneratedBlazorLinkerDescriptor)" />
      <LinkerMarkerFileOutput Include="$(BlazorIntermediateLinkerResultFilePath)" />
      <BlazorIndexHtmlFileOutput Include="$(BlazorIndexHtmlOutputPath)" />
      <BlazorResolvedAssembliesOutput Include="BlazorResolvedAssembliesOutputPath" />
    
  </ItemGroup>
   
    <MakeDir Directories="$(BlazorIntermediateOutputPath)" />    
    
  </Target>

  <Target Name="ResolveBinaryOutput" DependsOnTargets="CollectLinkerOutputs;GetBaseClassLibrary" />

  <Target Name="CollectLinkerDescriptors"
          Inputs="@(IntermediateAssembly);@(BlazorLinkerDescriptor);@(ProducedLinkerDescriptor)"
          Outputs="@(ProducedLinkerDescriptor)"
          Condition="$(BlazorShouldRunMonoLinker) == 'true' and '@(BlazorLinkerDescriptor)' == ''">
    
    <ItemGroup>
      <PrepareAssemblyLine Include="@(IntermediateAssembly->'%(FileName)')" />
      <GeneratedDescriptorLine Include="&lt;linker&gt;" />
      <GeneratedDescriptorLine Include="@(PrepareAssemblyLine->'&lt;assembly fullname=&quot;%(Identity)&quot; /&gt;')" />
      <GeneratedDescriptorLine Include="&lt;/linker&gt;" />
    </ItemGroup>

    <WriteLinesToFile
      Condition = "'@(BlazorLinkerDescriptor)' == ''"
      Lines = "@(GeneratedDescriptorLine)"
      File ="$(GeneratedBlazorLinkerDescriptor)" Overwrite="true" />
    
    <ItemGroup Condition = "'@(BlazorLinkerDescriptor)' == ''">
      <BlazorLinkerDescriptor Include="$(GeneratedBlazorLinkerDescriptor)" />
      <FileWrites Include="$(GeneratedBlazorLinkerDescriptor)" />
    </ItemGroup>
  
  </Target>    
    
  <Target
    Name="RunMonoLinker"
    Condition="$(BlazorShouldRunMonoLinker) == 'true'"
    DependsOnTargets="CollectLinkerDescriptors"
    Inputs="@(IntermediateAssembly);
      @(ReferenceCopyLocalPaths->WithMetadataValue('Extension','.dll'));
      @(BlazorLinkerDescriptor)"
    Outputs="@(LinkerMarkerFileOutput)"
  >
    <!-- 
    At this point we have decided to run the mono linker on the Blazor assembly and its dependencies.
    The steps to run the mono linker are the following:
    1) Clear the linker output directory if not clean before hand, as we don't know what the outputs of
    the linker will be.
    2) Run the linker on the main assembly, its dependencies and pass in the BCL folders to do the lookup
    for framework assemblies.
    3) Once we've run the linker we need to capture the produced output and generate a marker file containing
    the list of produced files. This file will act as a marker to skip running the linker if nothing changed.
    4) Add the file we just created to the list of file writes, so that if we turn off the linker or do something
    else we'll know we have to run the linker again.
    -->
    <ItemGroup>
      <_BlazorAssembliesToLink Include="@(ReferenceCopyLocalPaths->WithMetadataValue('Extension','.dll')->'-a &quot;%(FullPath)&quot;')" />
      <_BlazorAssembliesToLink Include="@(IntermediateAssembly->'-a &quot;%(FullPath)&quot;')" />
      <_BlazorFolderLookupPaths Include="@(MonoBaseClassLibraryFolder->'-d &quot;%(Identity)&quot;')" />
      <_BlazorAssemblyDescriptorFiles
        Include="@(BlazorLinkerDescriptor->'-x &quot;%(FullPath)&quot;')" Condition="'@(BlazorLinkerDescriptor)' != ''" />
    </ItemGroup>

    <PropertyGroup>
      <_BlazorMonoLinkerAdditionalOptions>$(AdditionalMonoLinkerOptions)</_BlazorMonoLinkerAdditionalOptions>
    </PropertyGroup>

    <!-- Clear the contents of /obj/debug/netstandard2.0/blazor/blazor/linker -->
    <Delete Files="$(BlazorIntermediateLinkerOutputPath)*.dll" />

    <!-- Run the linker and put the results in /obj/debug/netstandard2.0/blazor/blazor/linker -->
    <Exec Command="dotnet $(MonoLinkerPath) $(_BlazorMonoLinkerAdditionalOptions) @(_BlazorFolderLookupPaths, ' ') -o $(BlazorIntermediateLinkerOutputPath) @(_BlazorAssemblyDescriptorFiles, ' ') @(_BlazorAssembliesToLink, ' ')"  />

    <!-- Collect the contents of /obj/debug/netstandard2.0/blazor/blazor/linker/ -->
    <ItemGroup>
      <_BlazorLinkerOutput Include="$(BlazorIntermediateLinkerOutputPath)*.dll" />
    </ItemGroup>

    <!-- 
    Write the list of files in /obj/debug/netstandard2.0/blazor/blazor/linker/ into 
    /obj/debug/netstandard2.0/blazor/blazor/linker.marker.txt
    -->
    <WriteLinesToFile File="$(BlazorIntermediateLinkerResultFilePath)" Lines="@(_BlazorLinkerOutput)" Overwrite="true" />

    <!-- Add /obj/debug/netstandard2.0/blazor/blazor/linker.marker.txt to the list of written files. -->
    <ItemGroup>
      <FileWrites Include="$(BlazorIntermediateLinkerResultFilePath)" />
    </ItemGroup>
  </Target>

  <Target 
    Name="CollectLinkerOutputs"
    Condition="'$(BlazorShouldRunMonoLinker)' == 'true'"
    DependsOnTargets="RunMonoLinker">
    <!--
    Read the outputs from the linker (from this run or a previous run) and set them in an item group for
    later use.
    -->
    <ReadLinesFromFile File="$(BlazorIntermediateLinkerResultFilePath)">
      <Output TaskParameter="Lines" ItemName="_OptimizedFiles"/>
    </ReadLinesFromFile>
    
    <ItemGroup>
      <BlazorItemSpec Include="@(_OptimizedFiles)">
        <TargetOutputPath>$(ProjectDir)$(OutputPath)$(BaseBlazorRuntimeBinOutputPath)%(FileName)%(Extension)</TargetOutputPath>
        <Type>Assembly</Type>
        <PrimaryOutput Condition="'%(FileName)' == @(IntermediateAssembly->'%(FileName)')">true</PrimaryOutput>
      </BlazorItemSpec>    
      <FileWrites Include="@(BlazorItemSpec->WithMetadataValue('Type','Assembly')->'%(TargetOutputPath)')" />
    </ItemGroup>
  
  </Target>

  <Target
    Name="ResolveRuntimeDependencies"
    Condition="'$(BlazorShouldRunMonoLinker)' == 'false'"
    Inputs="@(IntermediateAssembly);
      @(ReferenceCopyLocalPaths->WithMetadataValue('Extension','.dll'));
      @(BlazorLinkerDescriptor)"
    Outputs="@(BlazorResolvedAssembliesOutput)"
  >
    <ItemGroup>
      <_DependenciesParameter Include="@(ReferenceCopyLocalPaths->WithMetadataValue('Extension','.dll')->'--reference &quot;%(FullPath)&quot;')" />
    </ItemGroup>
    <PropertyGroup>
      <_BclParameter>--base-class-library &quot;$(MonoBaseClassLibraryPath)&quot; --base-class-library &quot;$(MonoBaseClassLibraryFacadesPath)&quot;</_BclParameter>
    </PropertyGroup>

    <Exec Command="$(BlazorBuildExe) resolve-dependencies &quot;@(IntermediateAssembly->'%(FullPath)')&quot; @(_DependenciesParameter, ' ') $(_BclParameter) --output &quot;$(BlazorResolvedAssembliesOutputPath)&quot;" />

  </Target>
  
  <Target
    Name="GetBaseClassLibrary"
    DependsOnTargets="ResolveRuntimeDependencies"
    Condition="'$(BlazorShouldRunMonoLinker)' == 'false'">

    <!--
    At this point we have decided not to run the linker and instead to just copy the BCL from
    the nuget package into the _framework/_bin folder. The only thing we need to do here is
    collect the list of items that will go into _framework/_bin. This list is composed of:
    * All the mono BCL files.
    * The main application assembly.
    * All the project/package assemblies referenced by the app.
    * The mono BCL.    
    -->

    <ReadLinesFromFile File="$(BlazorResolvedAssembliesOutputPath)">
      <Output TaskParameter="Lines" ItemName="_ResolvedAssemblyPaths"/>
    </ReadLinesFromFile>

    <ItemGroup>
      <BlazorItemSpec Include="@(_ResolvedAssemblyPaths)">
        <TargetOutputPath>$(ProjectDir)$(OutputPath)$(BaseBlazorRuntimeBinOutputPath)%(FileName)%(Extension)</TargetOutputPath>
        <Type>Assembly</Type>
        <PrimaryOutput Condition="'%(FileName)' == @(IntermediateAssembly->'%(FileName)')">true</PrimaryOutput>
      </BlazorItemSpec>
      <FileWrites Include="@(BlazorItemSpec->WithMetadataValue('Type','Assembly')->'%(TargetOutputPath)')" />
    </ItemGroup>

  </Target>

  <Target
    Name="BuildBlazorIndexHtml"
    Inputs="$(BlazorIndexHtml);@(BlazorItemSpec->WithMetadataValue('Type','Assembly'))"
    Outputs="@(BlazorIndexHtmlFileOutput)"
    Condition="Exists('$(BlazorIndexHtml)')">
    <ItemGroup>
      <_AppReferences Include="@(BlazorItemSpec->WithMetadataValue('Type','Assembly')->WithMetadataValue('PrimaryOutput','')->'%(FileName)%(Extension)')" />
    </ItemGroup>
    
    <Exec Command="$(BlazorBuildExe) build @(IntermediateAssembly) -hp &quot;$(BlazorIndexHtml)&quot; @(_AppReferences->'-r %(Identity)', ' ') -o &quot;$(BlazorIndexHtmlOutputPath)&quot;" />           
    
    <ItemGroup>
      <_BlazorIndex Include="$(BlazorIndexHtmlOutputPath)" />
      <BlazorItemSpec Include="@(_BlazorIndex)">
        <TargetOutputPath>$(ProjectDir)$(OutputPath)dist/%(FileName)%(Extension)</TargetOutputPath>
        <Type>EntryPoint</Type>
      </BlazorItemSpec>
      <FileWrites Include="$(BlazorIndexHtmlOutputPath)" />
    </ItemGroup>
  
  </Target>
  
</Project>